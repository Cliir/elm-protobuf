-- DO NOT EDIT
-- AUTOGENERATED BY THE ELM PROTOCOL BUFFER COMPILER
-- https://github.com/tiziano88/elm-protobuf
-- source file: fuzzer.proto

module Fuzzer exposing (..)

import Protobuf exposing (..)

import Json.Decode as JD
import Json.Encode as JE


type alias Fuzz =
    { stringField : String -- 1
    , int32Field : Int -- 2
    , int64Field : Int -- 3
    }


fuzzDecoder : JD.Decoder Fuzz
fuzzDecoder =
    JD.lazy <| \_ -> decode Fuzz
        |> required "stringField" JD.string ""
        |> required "int32Field" JD.int 0
        |> required "int64Field" JD.int 0


fuzzEncoder : Fuzz -> JE.Value
fuzzEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "stringField" JE.string "" v.stringField)
        , (requiredFieldEncoder "int32Field" JE.int 0 v.int32Field)
        , (requiredFieldEncoder "int64Field" JE.int 0 v.int64Field)
        ]
