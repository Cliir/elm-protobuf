-- DO NOT EDIT
-- AUTOGENERATED BY THE ELM PROTOCOL BUFFER COMPILER
-- https://github.com/tiziano88/elm-protobuf
-- source file: google/protobuf/wrappers.proto

module Google.Protobuf.Wrappers exposing (..)

import Protobuf exposing (..)

import Json.Decode as JD
import Json.Encode as JE


type alias DoubleValue =
    { value : Float -- 1
    }


doubleValueDecoder : JD.Decoder DoubleValue
doubleValueDecoder =
    JD.lazy <| \_ -> decode DoubleValue
        |> required "value" JD.float 0.0


doubleValueEncoder : DoubleValue -> JE.Value
doubleValueEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "value" JE.float 0.0 v.value)
        ]


type alias FloatValue =
    { value : Float -- 1
    }


floatValueDecoder : JD.Decoder FloatValue
floatValueDecoder =
    JD.lazy <| \_ -> decode FloatValue
        |> required "value" JD.float 0.0


floatValueEncoder : FloatValue -> JE.Value
floatValueEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "value" JE.float 0.0 v.value)
        ]


type alias Int64Value =
    { value : Int -- 1
    }


int64ValueDecoder : JD.Decoder Int64Value
int64ValueDecoder =
    JD.lazy <| \_ -> decode Int64Value
        |> required "value" JD.int 0


int64ValueEncoder : Int64Value -> JE.Value
int64ValueEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "value" JE.int 0 v.value)
        ]


type alias UInt64Value =
    { value : Int -- 1
    }


uInt64ValueDecoder : JD.Decoder UInt64Value
uInt64ValueDecoder =
    JD.lazy <| \_ -> decode UInt64Value
        |> required "value" JD.int 0


uInt64ValueEncoder : UInt64Value -> JE.Value
uInt64ValueEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "value" JE.int 0 v.value)
        ]


type alias Int32Value =
    { value : Int -- 1
    }


int32ValueDecoder : JD.Decoder Int32Value
int32ValueDecoder =
    JD.lazy <| \_ -> decode Int32Value
        |> required "value" JD.int 0


int32ValueEncoder : Int32Value -> JE.Value
int32ValueEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "value" JE.int 0 v.value)
        ]


type alias UInt32Value =
    { value : Int -- 1
    }


uInt32ValueDecoder : JD.Decoder UInt32Value
uInt32ValueDecoder =
    JD.lazy <| \_ -> decode UInt32Value
        |> required "value" JD.int 0


uInt32ValueEncoder : UInt32Value -> JE.Value
uInt32ValueEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "value" JE.int 0 v.value)
        ]


type alias BoolValue =
    { value : Bool -- 1
    }


boolValueDecoder : JD.Decoder BoolValue
boolValueDecoder =
    JD.lazy <| \_ -> decode BoolValue
        |> required "value" JD.bool False


boolValueEncoder : BoolValue -> JE.Value
boolValueEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "value" JE.bool False v.value)
        ]


type alias StringValue =
    { value : String -- 1
    }


stringValueDecoder : JD.Decoder StringValue
stringValueDecoder =
    JD.lazy <| \_ -> decode StringValue
        |> required "value" JD.string ""


stringValueEncoder : StringValue -> JE.Value
stringValueEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "value" JE.string "" v.value)
        ]


type alias BytesValue =
    { value : (List Int) -- 1
    }


bytesValueDecoder : JD.Decoder BytesValue
bytesValueDecoder =
    JD.lazy <| \_ -> decode BytesValue
        |> required "value" bytesFieldDecoder []


bytesValueEncoder : BytesValue -> JE.Value
bytesValueEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "value" bytesFieldEncoder [] v.value)
        ]
